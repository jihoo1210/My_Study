1. 람다식이란?
- 함수형 프로그래밍의 특징: 데이터 처리의 다형성
- 람다식: (매개변수 ...) -> {} 
-- 인터페이스의 익명 구현 객체
-- 타입은 오버라이딩힌 인터페이스의 타입이다.
--- 하나의 추상 매소드를 가진 인터페이스에서만 람다식을 사용할 수 있다.
---- 단 하나의 추상 메소드를 지닌 인터페이스: 함수형 인터페이스
----- @FunctionalInterface: 함수형 인터페이스임을 검사하는 어노테이션

2. 매개변수가 없는 람다식
- 실행문이 하나인 경우 중괄호를 생략할 수 있다.

3. 매개변수가 있는 람다식
- 매개변수를 작성할 때 타입을 생략하고 작성할 수 있다.
- 매개변수가 하나인 경우 소괄호를 생략할 수 있다.

4. 리턴값이 있는 람다식
- 중괄호에 return문 하나만 있을 경우 return을 생략할 수 있다.

5. 메소드 참조

5-1. 정적 메소드와 인스턴스 메소드 참조
- 정적 메소드: 클래스 :: 메소드
- 인스턴스 메소드: 참조변수 :: 메소드
-- 메소드를 참조해서 매개변수의 정보 및 리턴 타입을 알아내 람다식의 불필요한 사용을 방지한다.

5-2. 매개변수의 매소드 참조
- 클래스 :: instanceMethod

6. 생성자 참조
- 클래스 :: new