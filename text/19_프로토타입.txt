1. 객체 지향 프로그래밍
- 객체
-- 속성(프로퍼티)을 통해 여러 개의 값을 하나의 단위로 구성한 복합적인 자료구조
-- 상태 데이터와 동작(메서드)을 하나의 논리적인 단위로 묶은 복합적인 자료구조

2. 상속과 프로토타입
- 프로토타입을 기반으로 상속을 구현한다.
- 상속을 통해 불필요한 중복을 제거할 수 있다.

3. 프로토타입 객체
- 프로토타입 객체: 어떤 객체의 상위 객체 역할을 하는 객체
- 모든 객체는 [[prototype]]이라는 내부 슬롯을 가진다.
- 모든 객체는 하나의 프로토타입을 가진다.
-- 모든 프로토타입은 생성자 함수와 연결되어 있다.

3-1. __proto__ 접근자 프로퍼티
- __proto__를 사용해 [[prototype]] 내부 슬롯에 간접적으로 접근할 수 있다.

3-1-1. __proto__는 접근자 프로퍼티다
- 접근자 프로퍼티를 통해 프로토타입에 접근하면 내부적으로 getter와 setter이 호출된다.

3-1-2. __proto__ 접근자 프로퍼티는 상속을 통해 사용된다
- __proto__ 접근자 프로퍼티는 객체가 직접 소유하는 프로퍼티가 아니라 Object.prototype의 프로퍼티이다.

3-1-3. __proto__는 접근자 프로퍼티를 통해 프로토타입에 접근하는 이유
- 상호 참조에 의해 프로토타입 체인이 생성되는 것을 방지하기 위함.
- 프로토타입 체인은 단방향 링크드 리스트로 구현되어야 한다.

3-1-4. __proto__ 접근자 프로퍼티를 코드 내에서 직접 사용하는 것은 권장되지 않는다
- getPropertyOf: 접근자 대신 프로토타입의 참조를 취득하고 싶은 경우
- setPropertyOf: 접근자 대신 프로토타입을 교체하고 싶은 경우

3-2. 함수 객체의 prototype 프로퍼티
- 함수 객체만이 소유하는 prototype 프로퍼티는 생성자 함수가 생성할 인스턴스의 prototype을 가리킨다.

구분       | 소유     | 값              | 사용 주체   | 사용 목적
__proto__ | 모든 객체 | 프로토타입의 참조 | 모든 객체   | 객체가 자신의 프로토타입에 접근 또는 교체하기 위해 사용
prototype | 생성자    | 프로토타입의 참조 | 생성자 함수 | 생성자 함수가 자신이 생성할 객체의 프로토타입을 할당하기 위해서 사용

3-3. 프로토타입의 constructor 프로퍼티와 생성자 함수
- 모든 프로토타입은 constructor 프로퍼티를 가진다.
- constructor 프로퍼티: prototype 프로퍼티로 자신을 참조하고 있는 생성자 함수를 가리킨다.

4. 리터럴 표기법에 의해 생성된 객체의 생성자 함수와 프로토타입
- 리터럴 표기법에 의해 생성된 객체도 상속을 위해 프로토타입이 필요하다.
- 프로토타입과 생성자 함수는 단독으로 존재할 수 없고 언제나 쌍으로 존재한다.

5. 프로토타입의 생성 지점

5-1. 사용자 정의 생성자 함수와 프로토타입 생성 지점
- 함수 선언문이 런타임 이전에 생성 될 때 프로토타입도 더불어 생성된다.

5-2. 빌트인 생성자 함수와 프로토타입 생성 지점
- 빌트인 생성자 함수: 자바스크립트가 기본 제공하는 생성자 함수
- 모든 빌트인 생성자 함수는 전역 객체(global)가 생성되는 시점에 생성된다.

-- 객체(인스턴스)가 생성되기 이전에 프로토타입과 생성자 함수는 이미 객체화되어 존재한다.
-- 이후 객체를 생성하면 프로토타입은 생성된 객체으 [[prototype]] 내부 슬롯에 할당된다.

6. 객체 생성 방식과 프로토타입의 결정
- 객체 생성 방식
-- 객체 리터럴
-- Object 생성자 함수
-- 생성자 함수
-- Object.create 메서드
-- 클래스(ES6)

- 다양한 방식으로 생성된 모든 객체는 추상 연산 OrdinaryObjectCreate에 의해 생성된다.
- 프토토타입은 추상 연산 OrdinaryObjectCreate에 전달되는 인수에 의해 결정된다.

6-1. 객체 리터럴에 의해 생성된 객체의 프로토타입
- 자바스크립트 엔진은 객체 리터럴을 생성할 때 OrdinaryObjectCreate를 호출해서 Object.prototype을 전달한다.

6-2. Object 생성자 함수에 의해 생성된 객체의 프로토타입
- Object 생성자 함수를 인수 없이 호출하면 객체 리터털과 마찬가지로 추상 연산 OrdinaryObjectCreate가 호출된다.
- 전달되는 프로토타입은 Object.prototype이다.

- 객체 리터럴과 Object 생성자 함수의 차이점
-- 객체 리터럴 방식은 리터럴 내부에 프로퍼티를 추가하지만, Object 생성자 함수는 일단 빈 객체를 생성한 이후 프로퍼티를 추가해야 한다.

6-3. 생성자 함수에 의해 생성된 객체의 프로토타입
- new 연산자를 사용하여 인스턴스를 생성하면 다른 객체 생성 방식과 마찬가지로 추상 연산 OrdinaryObjectCreate가 호출된다.
- 추상 연산 OrdinaryObjectCreate에 생성자 함수의 prototype에 바인딩되어 있는 객체를 전달한다.

7. 프로토타입 체인
- 객체에 프로퍼티에 접근하려고 할 때 해댱 객체에 접근하려는 프로퍼티가 없다면 [[property]] 내부 슬롯의 참조를 따라 자신의 부모 역할을 하는 프로토타입의 프로퍼티를 순차적으로 검색한다.
- Object.prototype은 프로토타입 체인의 종점이다.

- 프로퍼티가 아닌 식별자는 스코프 체인에서 검색한다.

8. 오버라이딩과 프로퍼티 섀도잉
- 프로퍼티 섀도잉: 상송 관계에서 오버라이딩 등으로 프로퍼티가 가려지는 현상

- 오버라이딩: 상위 클래스가 가지고 있는 메서드를 하위 클래스가 재정의하여 사용하는 방식
- 오버로딩: 동일한 이름인 함수들의 매개변수를 다르게 구현하여 매개변수에 의해 메서드를 구별하여 호출하는 방식

- 하위 객체를 통해서 프로토타입의 프로퍼티를 삭제 또는 변경할 수 없다.

9. 프로토타입의 교체
- 프로토타입은 임이의 다른 객체로 변경할 수 있다.
-- 상속 관계를 동적으로 변경할 수 있다.

9-1. 생성자 함수에 의한 프로토타입의 교체
- 객체.property =

9-2. 인스턴스에 의한 프로토타입 교체
- 프로토타입은 생성자 함수의 prototype 프로퍼티뿐만 아니라 인스턴스의 __proto__ 접근자 프로퍼티를 통해서도 접근할 수 있다.
- setPropertyOf를 사용한다.

- 생성자 함수에 의한 교체와 인스턴스에 의한 교체 차이점
- 생성자 함수: 이후에 생성될 인스턴스의 프로토타입 교체
-- 생성자 함수의 prototype 또한 교체된 prototype을 가리킨다.
- 인스턴스: 현재 생성된 인스턴스의 프로퍼티 교체
-- 생성자 함수의 prototype는 교체된 prototype을 가리키지 않는다.

10. instanceof 연산자
- 객체 instanceof 생성자 함수
- 우변의 prototype에 바인딩된 객체가 좌변의 객체의 프로토타입 체인 상에 존재하면 true로 평가된다.
-- constructor 프로퍼티가 가리키는 생성자 함수를 찾는 것이 아니다.

11. 직접 상속

11-1. Object.create
- Object.create 메서드는 명시적으로 프로토타입을 지정하여 새로운 객체를 생성한다.
- 마찬가지로 OrdinaryObjectCreate를 호출한다.
- Object.create(프로토타입, 객체(생략 가능))

11-2. 객체 리터럴 내부에서 __proto__에 의한 직접 상속
- __proto__ : 프로토타입

12. 정적 프로퍼티/메서드
- 인스턴스를 생성하지 않아도 사용할 수 있는 프로퍼티/메서드
-- 생성자 함수 프로토타입에 추가되지 않는다.
- 생성자 함수가 생성한 인스턴스로 참조/호출할 수 없다.

13. 프로퍼티 존재 확인

13-1. in 연산자
- key in Object
-- 상속받은 모든 프로토타입의 프로퍼티를 확인한다

13-2. Object.prototype.hasOwnProperty 메서드
- 인수로 전달받은 프로퍼티 키가 객체 고유의 프로퍼티 키인 경우에만 true를 반환한다.
- 상속 받은 프로퍼티키는 false를 반환한다.

14. 프로퍼티 열거
- for(변수 선언문 in 객체)
-- 프로퍼티 키를 변수에 할당한다.
-- 상속받은 프로토타입의 프로퍼티까지 열거한다.
--- [[Enumerable]]이 true인 객체만 열거한다.

15.Object.keys/values/entries 메서드
- Object.keys(): 자신의 열거 가능한 프로퍼티 키를 배열로 반환한다.
- Object.values(): 자신의 열거 가능한 프로퍼티 값을 배열로 반환한다.
- Object.entries(): 자신의 열거 가능한 프로퍼티 쌍을 배열로 반환한다. 