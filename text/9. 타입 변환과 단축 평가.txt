1. 타입 변환이란?
- 명시적 변환(casting)
- 암묵적 변환(coercion)
-- 원시값은 불변값이기 때문에 변경할 수 없다. 대신 새로운 타입의 값을 만들어 사용한다.
--- 암묵적 변환은로 생성된 값은 변수에 재할당되지 않고 버려진다.

2-1. 문자열 타입으로 변환
- + ''

2-2. 숫자 타입으로 변환
- 산술 연산자를 사용하는 경우 피연산자를 모두 숫자 타입으로 암묵적 변환한다.
-- 변환할 수 없는 경우 표현식은 NaN을 반환한다.

2-3. 불리언 타입으로 변환
- Falsy 값
-- false, indefined, null, 0, NaN, ''

3. 명시적 타입 변환

3-1. 문자열 타입으로 변환
- String 생성자 함수를 new 없이 생성하는 방법 String(Object)
- Object.prototype.toString 메서드 (Object).toString();
- 문자열 연결 연산자 Object + ''

3-2. 숫자 타입으로 변환
- Number 생성자 함수를 new 없이 생성하는 방법 Number(Object)
- paresInt(), parseFolat() 메서드 paresInt(Object);
- 단항 산술 연산자(+), 산술 연산자(*)

3-3. 불리언 타입으로 변환
- Boolean 생성자 함수를 new 없이 생성하는 방법 Boolean(Object)
- !부정 논리 연산자(!) 두 번 사용하는 방법

4. 단축 평가

4-1. 논리 연산자를 사용한 단축 평가
- &&, ||
-- 논리 연산의 결과를 결저아는 두 번째 피연산자를 반환한다.

4-2. 옵셔널 체이닝 연산자
- 옵셔널 체이닝 연산자(?.)는 좌항의 피연산자가 null 또는 undefined인 경우 undefined를 반환하고 그렇지 않다면 우항의 프로퍼티 참조를 이어간다.
-- 프로퍼티 참조: 객체의 프로퍼티에 접근해 객체의 프로퍼티 값을 참조하는 것

4-3. null 병합 연산자
- null 병합 연산자(??)는 좌항의 피연산자가 null 또는 undefined인 경우 우항의 피연산자를 반환하고 그렇지 않은 경우 좌항의 피연산자를 반환한다.
-- null ?? true -> true
