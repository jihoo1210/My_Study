1. 스트림이란?
- 컬렉션 및 배열의 요소를 반복 처리하기 위한 클래스
-- 내부 반복자이므로 처리 속도가 빠르고 병렬 처리에 효율적이다.
-- 람다식으로 다양한 요소 처리를 정의할 수 있다.
-- 중간 처리와 최종 처리를 수행하도록 파이프 라인을 형성할 수 있다.

2. 내부 반복자
- for문이나 iterator는 컬렉션의 요소를 컬렉션 바깥쪽으로 가져와 처리한다.(외부 반복자)
- 요소 처리 방법을 컬렉션 내부로 주입시켜 요소를 반복 처리한다.(내부 반복자)

3. 중간 처리와 최종 처리
- 스트림 파이프라인: '오리지널 스트림' 뒤에 '필터링 중간 스트림'이 올 수 있고, 그 뒤에 '매핑 중간 스트림'이 연결될 수 있다.
- 최종 처리 부분이 없다면 중간 처리 스트림은 동작하지 않는다.

4. 리소스로부터 스트림 얻기
- BaseStream(부모 인터페이스): 모든 스트림에서 사용할 수 있는 공통 메소드들이 정의 되어있다.
- 자식 인터페이스
-- Stream: 객체 요소 처리
-- IntStream: int 요소 처리
-- LongStream: long 요소 처리
-- DoubleStream: double 요소 처리

4-1. 컬렉션으로부터 스트림 얻기
- Collection 인터페이스는 스트림과 parallelStream() 메소드를 지닌다.
-- Stream<T> stream = list.stream();

4-2. 배열로부터 스트림 얻기

4-3. 숫자 범위로부터 스트림 얻기
- range(int startNum);
- rangeClosed(int startNum, int endNum);

4-4. 파일로부터 스트림 얻기
- Files.lines(): 파일을 열고 한 행씩 읽으면서 문자열 스트림 생성.

5. 요소 걸러내기(필터링)
리턴 타입  | 메소드(매개변수)          | 설명
...Stream | distinct()              | 중복(객체인 경우 equals() 리턴값에 따름) 제거
...Stream | filter(Predicate<T>)    | 조건 필터링(true를 리턴하는 요소만 필터링한다.), 매개 타입은 요소 타입에 따른 함수형 인터페이스
...Stream | filter(IntPredicate)    | 조건 필터링, 매개 타입은 요소 타입에 따른 함수형 인터페이스
...Stream | filter(LongPredicate)   | 조건 필터링, 매개 타입은 요소 타입에 따른 함수형 인터페이스
...Stream | filter(DoublePredicate) | 조건 필터링, 매개 타입은 요소 타입에 따른 함수형 인터페이스

6. 요소 변환(매핑)
- 스트림의 요소를 다른 요소로 변환하는 중간 처리 기능

6-1. 요소를 다른 요소로 변환
- mapXxx() 메소드는 요소를 다른 요소로 변환하는 새로운 스트림을 리턴한다.

6-2. 요소를 복수 개의 요소로 변환
- flatXxx() 메소드는 하나의 요소를 복수 개의 요소들로 변환한 새로운 스트림을 반환한다.
